(function(){
  // Generated by LiveScript 1.6.0
  /** Please Don't Modify These Lines Below   */
  /** --------------------------------------- */
  var SchemaBaseClass, MANIFEST, NodejsProcess, roots, n;
  SchemaBaseClass = (function(){
    SchemaBaseClass.displayName = 'SchemaBaseClass';
    var prototype = SchemaBaseClass.prototype, constructor = SchemaBaseClass;
    function SchemaBaseClass(){
      this.sensor_identities = {};
      this.sensor_actuator_actions = {};
      this.annotation_stores = {};
    }
    SchemaBaseClass.prototype.declareSensorIdentities = function(s_type, identities){
      this.sensor_identities[s_type] = identities;
      return this;
    };
    SchemaBaseClass.prototype.declareSensorActuatorActions = function(s_type, actions){
      this.sensor_actuator_actions[s_type] = actions;
      return this;
    };
    SchemaBaseClass.prototype.declareAnnotations = function(p, annotations){
      if (p == null) {
        p = '/';
      }
      if (!p.startsWith('/')) {
        p = "/" + p;
      }
      this.annotation_stores[p] = annotations;
      return this;
    };
    return SchemaBaseClass;
  }());
  if (typeof SCHEMA_BASE_CLASS != 'undefined' && SCHEMA_BASE_CLASS !== null) {
    SchemaBaseClass = SCHEMA_BASE_CLASS;
  }
  /** --------------------------------------- */
  /** Please Don't Modify These Lines Above   */
  MANIFEST = {
    name: 'demo3',
    version: '0.0.1'
  };
  NodejsProcess = (function(superclass){
    var prototype = extend$((import$(NodejsProcess, superclass).displayName = 'NodejsProcess', NodejsProcess), superclass).prototype, constructor = NodejsProcess;
    NodejsProcess.prototype.cpu = [
      {
        field: 'user',
        unit: 'bytes',
        value: ['int', [0, 4294967296]]
      }, {
        field: 'system',
        unit: 'bytes',
        value: ['int', [0, 4294967296]]
      }
    ];
    NodejsProcess.prototype.memory = [
      {
        field: 'rss',
        unit: 'bytes',
        value: ['int', [0, 4294967296]]
      }, {
        field: 'heapTotal',
        unit: 'bytes',
        value: ['int', [0, 4294967296]]
      }, {
        field: 'heapUsed',
        unit: 'bytes',
        value: ['int', [0, 4294967296]]
      }, {
        field: 'external',
        unit: 'bytes',
        value: ['int', [0, 4294967296]]
      }
    ];
    NodejsProcess.prototype.os = [
      {
        field: 'freeMemory',
        unit: 'bytes',
        value: ['int', [0, 4294967296]],
        $submodule: 'os',
        $method: 'freemem'
      }, {
        field: 'uptime',
        unit: 'seconds',
        value: ['int', [0, 4294967296]],
        $submodule: 'os',
        $method: 'uptime'
      }
    ];
    function NodejsProcess(){
      NodejsProcess.superclass.call(this);
      this.declareSensorIdentities('cpu', ['0']).declareSensorIdentities('memory', ['0']).declareSensorIdentities('os', ['current']).declareSensorActuatorActions('os', [{
        action: 'set_special_mode',
        argument: ['enum', ['human_sleeping', 'offical_working', 'home_standby']],
        $parameters: {
          human_sleeping: {
            target_temperature: 26.0,
            operation_mode: 'auto'
          }
        }
      }]).declareAnnotations(null, {
        modules: ['os', 'cpu', 'memory']
      }).declareAnnotations('os', {
        type: 'composed'
      }).declareAnnotations('memory', {
        type: 'single',
        submodule: 'process',
        method: 'memoryUsage'
      }).declareAnnotations('cpu', {
        type: 'single',
        submodule: 'process',
        method: 'cpuUsage'
      });
      console.log("annotation_stores => " + JSON.stringify(this.annotation_stores, null, ' '));
    }
    return NodejsProcess;
  }(SchemaBaseClass));
  roots = {
    NodejsProcess: NodejsProcess
  };
  n = new NodejsProcess({});
  /** Please Don't Modify These Lines Below   */
  /** --------------------------------------- */
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  var classes = {MANIFEST: MANIFEST, NodejsProcess: NodejsProcess, n: n};
  module.exports = {roots: roots, classes: classes, manifest: MANIFEST};
}).call(this);