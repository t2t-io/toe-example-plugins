#!/bin/bash
#

function check_prerequisites {
	[ "" == "$(which js-yaml)" ] && echo "please install js-yaml via npm/yarn first" && exit 1
	[ "" == "$(which jq)" ] && echo "please instann jq first" && exit 1
}

function err_exit {
	local CODE=$1
	shift
	[ "0" != "${CODE}" ] && echo "$@" && exit ${CODE}
}

function cat_conf_get_value {
	[ ! -f "$0.yml" ] && return
	[ "" == "$1" ] && return
	local VALUE=$(cat "$0.yml" | js-yaml | jq -r ".$1")
	echo ${VALUE}
}

function run_agent_server {
	local TMP_OPTS=$(mktemp /tmp/XXXXXX)

	if [ "true" == "$(cat_conf_get_value TICC_UPLOAD_DG_TS false)" ]; then
		echo -e "-b 'tic-client.uploaders.dg-ts.enabled=true'" >> ${TMP_OPTS}
	else
		echo -e "-b 'tic-client.uploaders.dg-ts.enabled=false'" >> ${TMP_OPTS}
	fi

	if [ "true" == "$(cat_conf_get_value TICC_UPLOAD_DG_SS false)" ]; then
		echo -e "-b 'tic-client.uploaders.dg-ss.enabled=true'" >> ${TMP_OPTS}
	else
		echo -e "-b 'tic-client.uploaders.dg-ss.enabled=false'" >> ${TMP_OPTS}
	fi

	if [ "true" == "$(cat_conf_get_value TICC_UPLOAD_DM_PO false)" ]; then
		echo -e "-b 'tic-client.uploaders.dm-po.enabled=true'" >> ${TMP_OPTS}
	else
		echo -e "-b 'tic-client.uploaders.dm-po.enabled=false'" >> ${TMP_OPTS}
	fi

	local OPTS=$(cat ${TMP_OPTS} | tr '\n' ' ')
	rm -f ${TMP_OPTS}

	DOCKER_IMAGE_VERSION=${TOE_AGENT_VERSION} \
		DOCKER_IMAGE_CONF=${TOE_AGENT_CONF} \
		${SCRIPT_DIR}/start-yapps-docker \
			toe-agent \
			6040 \
			${PLUGIN_DIR} \
			YAPPS_EXTRA_AGENTS \
			${OPTS} \
			"$@"
}

function run_with_remote_box {
	local REMOTE=$1; shift
	[ "" == "${REMOTE}" ] && echo "please specify remote ip address" && exit 1
	local EXIT_CODE="0"

	##
	# Checking the existence of remote box
	#
	ping -t1 -c1 ${REMOTE} > /dev/null 2>&1; EXIT_CODE=$?
	err_exit ${EXIT_CODE} "unable to ping ${REMOTE}, please check the status of remote box"
	echo "${REMOTE} is alive"

	##
	# Checking SSH service is available on the remote box.
	#
	nc -w 1 -zv ${REMOTE} 22 > /dev/null 2>&1; EXIT_CODE=$?
	err_exit ${EXIT_CODE} "port 22 of ${REMOTE} is not opened"
	echo "${REMOTE} port 22 is ready"

	##
	# Checking which user account shall be used to
	# access remote box: `$(whoami)` or `root`
	#
	export REMOTE_USER=$(whoami)
	ssh -oBatchMode=yes ${REMOTE_USER}@${REMOTE} "uname -a" > /dev/null 2>&1; EXIT_CODE=$?
	if [ "0" != "${EXIT_CODE}" ]; then
		REMOTE_USER="root"
		ssh -oBatchMode=yes ${REMOTE_USER}@${REMOTE} "uname -a" > /dev/null 2>&1; EXIT_CODE=$?
		err_exit "${EXIT_CODE}" "either $(whoami) or root is not allowed to SSH login ${REMOTE}"
	fi
	echo "${REMOTE} with user ${REMOTE_USER} to login SSH service"

	##
	# Get `/tmp/cloud.bashrc` from remote box.
	#
	local TMP_BASHRC=$(mktemp /tmp/XXXXXX)
	echo "scp ${REMOTE_USER}@${REMOTE}:/tmp/cloud.bashrc ${TMP_BASHRC}"
	scp ${REMOTE_USER}@${REMOTE}:/tmp/cloud.bashrc ${TMP_BASHRC} > /dev/null 2>&1; EXIT_CODE=$?
	err_exit ${EXIT_CODE} "failed to get /tmp/cloud.bashrc"
	source ${TMP_BASHRC}
	rm -f ${TMP_BASHRC}
	echo "${REMOTE}:/tmp/cloud.bashrc is downloaded =>"
	env | sort | grep "^CLOUD_" | awk '{printf "\t%s\n", $0}'

	##
	# Get `/tmp/ttt_system` file from remote box.
	#
	local TMP_FILE="/tmp/$(date +%s)"
	scp ${REMOTE_USER}@${REMOTE}:/tmp/ttt_system ${TMP_FILE} > /dev/null 2>&1; EXIT_CODE=$?
	err_exit ${EXIT_CODE} "failed to get /tmp/ttt_system"
	echo "${REMOTE}:/tmp/ttt_system is downloaded =>"
	cat ${TMP_FILE} | awk '{printf "\t%s\n", $0}'

	##
	# Get PROFILE from `/tmp/ttt_system`.
	#
	local GREP_RE_OPTS="-P"
	[ "darwin" == "$(uname -s | tr '[A-Z]' '[a-z]')" ] && GREP_RE_OPTS="-E"
	export REMOTE_PROFILE=$(cat ${TMP_FILE} | grep ${GREP_RE_OPTS} "^profile\t" | awk -F'\t' '{print $2}')
	rm -f ${TMP_FILE}
	echo "${REMOTE}/profile => ${REMOTE_PROFILE}"

	##
	# Get profile top directory
	#
	local PROFILE_TOPDIR=$(ssh -q ${REMOTE_USER}@${REMOTE} 'echo ${YS_APP_DIR}/profiles/${BOARD_PROFILE}'); EXIT_CODE=$?
	err_exit ${EXIT_CODE} "failed to get the top directory of all profile versions from ${REMOTE}"
	echo "${REMOTE}/mnt => ${PROFILE_TOPDIR}"

	##
	# Get deployment configuration of current profile: production, testing, or development
	#
	local PROFILE_ENV=$(ssh -q ${REMOTE_USER}@${REMOTE} "cat ${PROFILE_TOPDIR}/env"); EXIT_CODE=$?
	err_exit ${EXIT_CODE} "failed to get deployment environment from ${REMOTE}"
	echo "${REMOTE}/env => ${PROFILE_ENV}"

	##
	# Get entry version of current profile.
	#
	local PROFILE_VERSION=$(ssh -q ${REMOTE_USER}@${REMOTE} "cat ${PROFILE_TOPDIR}/entry"); EXIT_CODE=$?
	err_exit ${EXIT_CODE} "failed to get the entry version of current profile archive from ${REMOTE}"
	echo "${REMOTE}/entry => ${PROFILE_VERSION}"

	##
	# Get the version of ToeAgent in current profile directory.
	#
	local TOE_AGENT_VERSION=$(ssh -q ${REMOTE_USER}@${REMOTE} "cat ${PROFILE_TOPDIR}/${PROFILE_VERSION}/apps/toe-agent/package.json | jq -r '.version'"); EXIT_CODE=$?
	err_exit ${EXIT_CODE} "failed to get the version of ToeAgent in profile archive from ${REMOTE}"
	echo "${REMOTE}/toe-agent => ${TOE_AGENT_VERSION}"

	##
	# Download toe-agent/config/xxx.json configuration files from remote box.
	#
	local TOE_AGENT_CONF="/tmp/toe-agent.conf.json"
	scp ${REMOTE_USER}@${REMOTE}:/${PROFILE_TOPDIR}/${PROFILE_VERSION}/apps/toe-agent/config/${PROFILE_ENV}.json ${TOE_AGENT_CONF} > /dev/null 2>&1; EXIT_CODE=$?
	err_exit ${EXIT_CODE} "failed to get config/${PROFILE_ENV}.json of ToeAgent from ${REMOTE}"
	echo "${REMOTE}/toe-agent/config/${PROFILE_ENV}.json =>"
	cat ${TOE_AGENT_CONF} | prettyjson --inline-arrays=1 | awk '{printf "\t%s\n", $0}'

	TOE_AGENT_VERSION=${TOE_AGENT_VERSION} \
		TOE_AGENT_CONF=${TOE_AGENT_CONF} \
			run_agent_server \
			-s "system-info.remote=${REMOTE}" \
			-s "communicator.connections.ps_s_data.url=tcp://${REMOTE}:6022" \
			-s "communicator.connections.ps_p_data.url=tcp://${REMOTE}:6023" \
			-s "sensorweb3-client.wss.server=http://${REMOTE}:6020" \
			-s "sensorweb3-client.wss.token=ABCD" \
			"$@"
}

function fn_exist {
	declare -f -F $1 > /dev/null
	return $?
}

function wrapper {
	[ "" == "$(which shyaml)" ] && echo "please install shyaml first" && exit 1
	local OS_NAME=$(uname -s | tr '[A-Z]' '[a-z]')
	local READLINK_OPTS=""
	[ "darwin" == "${OS_NAME}" ] || READLINK_OPTS="-f"
	local CURRENT=$(pwd)
	local SCRIPT_CURRENT_NAME=$(basename $0)
	local SCRIPT_BASE_NAME=$(basename $(readlink ${READLINK_OPTS} $0))
	local SCRIPT_SUBCOMMAND=$(echo ${SCRIPT_CURRENT_NAME} | sed "s/${SCRIPT_BASE_NAME}-//g")
	local FUNC="run_$(echo ${SCRIPT_SUBCOMMAND} | tr '-' '_')"
	echo "SCRIPT_CURRENT_NAME = ${SCRIPT_CURRENT_NAME}"
	echo "SCRIPT_BASE_NAME = ${SCRIPT_BASE_NAME}"
	echo "SCRIPT_SUBCOMMAND = ${SCRIPT_SUBCOMMAND}"
	echo "FUNC = ${FUNC}"

	local CURRENT=$(pwd)
	cd $(dirname $0)
	export PLUGIN_DIR=$(pwd)
	cd $(dirname $(readlink ${READLINK_OPTS} $0))
	export SCRIPT_DIR=$(pwd)
	cd ${CURRENT}

	if fn_exist ${FUNC}; then
		${FUNC} $@
	else
		echo "no such function: ${FUNC}"
	fi
}

export CONF=$0.yml
check_prerequisites
wrapper $@
